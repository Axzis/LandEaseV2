/**
 * @fileoverview Firestore Security Rules for the LandEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and landing pages,
 * combined with public read access for published landing pages. It leverages path-based
 * authorization and data denormalization for efficiency and security.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with the document ID matching the
 *   Firebase Authentication UID.
 * - /users/{userId}/pages/{pageId}: Stores landing page data, nested under the user's ID.
 *   Each page document contains a `userId` field that MUST match the `userId` in the path.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - Users can only create, read, update, and delete landing pages they own.
 * - Public read access is allowed for landing pages where the `published` field is true.
 * - Listing of all users is disallowed for privacy.
 * - All write operations validate that the user ID in the path matches the `userId` field
 *   in the document data to prevent data inconsistencies.
 * - To avoid costly `get()` calls in rules, the `userId` is denormalized into each page document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the userId.
     * @deny (get, create, update, delete) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to landing page documents nested under a user's profile.
     * @path /users/{userId}/pages/{pageId}
     * @allow (create, get, update, delete) if the user owns the landing page (userId matches).
     * @allow (get, list) if the page is published.
     * @deny (create, get, update, delete) if the user does not own the landing page.
     * @principle Enforces user-ownership for all writes and public read access for published pages.
     */
    match /users/{userId}/pages/{pageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && (isOwner(userId) || resource.data.published == true);
      allow list: if false; // Listing all pages is not permitted.

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}