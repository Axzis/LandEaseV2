/**
 * @description This ruleset enforces a strict user-ownership model for LandEase,
 *              where users can only manage their own profile information and landing pages.
 *              It leverages path-based ownership and denormalization for authorization independence.
 * @dataStructure
 *   /users/{userId} - Stores user profile information, with the document ID matching the Firebase Auth UID.
 *   /users/{userId}/pages/{pageId} - Stores landing page data owned by a specific user. The 'userId' field is denormalized within each page document.
 * @keySecurityDecisions
 *   - Users can only read and write their own user documents.
 *   - Users can only manage landing pages they own.
 *   - Listing all users is disallowed.
 * @denormalizationForAuthorization
 *   - The `Page` entity denormalizes the `userId` to allow direct ownership checks without needing to perform additional `get()` operations to the `users` collection.
 * @structuralSegregation
 *   - The `published` field within the `Page` entity will allow public read access to published pages without compromising the security of unpublished drafts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.  Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document.
     * @allow (get) - User with UID 'user_abc' can read their own profile document.
     * @allow (update) - User with UID 'user_abc' can update their own profile document.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile document.
     * @deny (create) - User with UID 'user_def' cannot create a profile document for 'user_abc'.
     * @deny (get) - User with UID 'user_def' cannot read the profile document of 'user_abc'.
     * @deny (update) - User with UID 'user_def' cannot update the profile document of 'user_abc'.
     * @deny (delete) - User with UID 'user_def' cannot delete the profile document of 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to landing page documents within a user's collection.  Users can only manage their own landing pages.
     * @path /users/{userId}/pages/{pageId}
     * @allow (create) - User 'user_abc' can create a new page under their user ID.
     * @allow (get) - User 'user_abc' can read their own page.
     * @allow (update) - User 'user_abc' can update their own page.
     * @allow (delete) - User 'user_abc' can delete their own page.
     * @deny (create) - User 'user_def' cannot create a page under 'user_abc's user ID.
     * @deny (get) - User 'user_def' cannot read a page belonging to 'user_abc'.
     * @deny (update) - User 'user_def' cannot update a page belonging to 'user_abc'.
     * @deny (delete) - User 'user_def' cannot delete a page belonging to 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/pages/{pageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}